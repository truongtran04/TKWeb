@model PagedList.IPagedList<ClothesStore.Models.ViewModels.ClothesViewModel>
@using PagedList.Mvc
@{
    ViewBag.Title = "Search Result";
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
}
<h2 class="text-center mb-4">Kết quả tìm kiếm cho: "@ViewBag.SearchTerm"</h2>
@if (!Model.Any())
{
    <p class="text-center">Không tìm thấy sản phẩm nào khớp với từ khóa "<strong>@ViewBag.SearchTerm</strong>".</p>
}
else
{
    <div class="container" style="margin-top:100px; margin-bottom: 100px;">

        <form id="filterForm" method="get" action="@Url.Action("Search", "Home")">
            <input type="hidden" id="minPriceInput" name="minPrice" value="@ViewBag.MinPrice">
            <input type="hidden" id="maxPriceInput" name="maxPrice" value="100000000"> <!-- Max price mặc định -->
            <!-- Box lọc theo giá -->
            <div>
                <h4>
                    Lọc theo giá
                    <button type="button" id="togglePriceFilter" class="btn btn-link">Hiện thị lọc giá</button>
                </h4>
                <div id="priceFilterContainer" style="display: none;">
                    <input type="range" id="priceRange" min="0" max="100000000" step="10000" value="@ViewBag.MinPrice" class="form-range" onchange="updatePriceValue()">
                    <p>Giá: <span id="priceValue">@ViewBag.MinPrice</span></p>
                </div>
            </div>

            <!-- Box lọc theo kích thước -->
            <div>
                <h4>
                    Lọc theo kích thước
                    <button type="button" id="toggleSizeFilter" class="btn btn-link">Hiện thị size</button>
                </h4>
                <div id="sizeFilterContainer" style="display: none;">
                    @foreach (var size in ViewBag.AllSizes)
                    {
                        <div class="form-check" style="font-size: 14px;">
                            <input type="checkbox" class="form-check-input" id="size_@size.SizeID" name="size" value="@size.SizeID">
                            <label class="form-check-label" for="size_@size.SizeID">@size.SizeName</label>
                        </div>
                    }
                </div>
            </div>

            <button type="submit" class="btn btn-primary mt-3">Lọc sản phẩm</button>
        </form>

        <div class="row">
            @foreach (var item in Model)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 col-12 mt-3 mb-4">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body p-0 position-relative">
                            <!-- Main image -->
                            <a href="@Url.Action("Index", "ClothesDetail", new { id = item.ClothesItem.ClothesID })">
                                <img id="mainImage_@item.ClothesItem.ClothesID" class="mainImage img-fluid rounded"
                                     src="@item.ClothesItem.UrlImage" alt="Product Image" style="height: 200px; object-fit: cover;">
                            </a>
                            <!-- Insert div -->
                            <div class="insert bg-light text-center p-2 position-absolute bottom-0 start-50 translate-middle-x mb-3 rounded btn btn-light border-0 hover-overlay" style="width: 90%;" onclick="toggleDiv(this)">
                                Thêm vào giỏ hàng
                            </div>
                            <!-- Sizes div -->
                            <div class="sizes bg-light text-center p-2 position-absolute bottom-0 start-50 translate-middle-x mb-3 rounded toggle-div" style="width: 90%; display: none;">
                                Thêm vào giỏ hàng
                                <div class="d-flex justify-content-center" id="sizeContainer_@item.ClothesItem.ClothesID">
                                    @foreach (var size in item.Sizes)
                                    {
                                        var specificImages = (List<ClothesStore.Models.Clothes_Color_Size>)item.Clothes_Color_Sizes;
                                        var colorID = specificImages.FirstOrDefault(clo => clo.SizeID == size.SizeID)?.ColorID;

                                        <div class="btn bg-white m-1 size-option" data-color="@colorID" style="font-size: 12px; padding: 6px 12px;">
                                            @size.SizeName
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="card-footer border-0 p-0">
                            <div class="d-flex flex-row mt-3 mb-2">
                                @foreach (var color in item.Colors)
                                {
                                    var specificImages = (List<ClothesStore.Models.Image>)item.Images;
                                    var imgUrl = specificImages.FirstOrDefault(img => img.ColorID == color.ColorID)?.UrlMainImg;
                                    var imageWithOrderOne = specificImages.FirstOrDefault(img => img.ColorID == color.ColorID && img.ImageOrder == 1);
                                    <div class="me-2">
                                        <input type="radio" class="btn-check" name="color_@item.ClothesItem.ClothesID" id="@color.ColorID"
                                               autocomplete="off" onclick="changeImageAndSizes(this, '@item.ClothesItem.ClothesID')" data-color-id="@color.ColorID"
                                               data-img-url="@imgUrl"
                                               @(imageWithOrderOne != null ? "checked" : "")>
                                        <label class="btn rounded-circle d-flex justify-content-center align-items-center" for="@color.ColorID" style="width: 24px; height: 24px;">
                                            <img src="@color.UrlImage" alt="" class="rounded-circle" style="width: 24px; height: 24px;">
                                        </label>
                                    </div>
                                }
                            </div>
                            <div class="mb-2">
                                <a href="@Url.Action("Index", "ClothesDetail", new { id = item.ClothesItem.ClothesID })">
                                    <p class="card-text text-truncate" style="max-width: 200px;">@item.ClothesItem.ClothesName</p>
                                </a>
                            </div>
                            <div class="mb-2">
                                <span><strong>@item.ClothesItem.Price đ</strong></span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="d-flex justify-content-center mt-4">
        @Html.PagedListPager(Model, page => Url.Action("Search", new { page, searchTerm = ViewBag.SearchTerm }), PagedListRenderOptions.PageNumbersOnly)
    </div>
}

<script>
    // Cập nhật giá khi kéo slider
    function updatePriceValue() {
        var price = document.getElementById("priceRange").value;
        document.getElementById("priceValue").textContent = price.toLocaleString() + " đ"; // Cập nhật hiển thị
        document.getElementById("minPriceInput").value = price; // Cập nhật giá trị input ẩn
    }

    // Đảm bảo sự kiện onchange được gắn đúng
    document.getElementById("priceRange").addEventListener("input", updatePriceValue);


    // Toggle price filter
    document.getElementById("togglePriceFilter").addEventListener("click", function() {
        var filterContainer = document.getElementById("priceFilterContainer");
        if (filterContainer.style.display === "none" || filterContainer.style.display === "") {
            filterContainer.style.display = "block";
        } else {
            filterContainer.style.display = "none";
        }
    });

    // Toggle size filter
    document.getElementById("toggleSizeFilter").addEventListener("click", function() {
        var filterContainer = document.getElementById("sizeFilterContainer");
        if (filterContainer.style.display === "none" || filterContainer.style.display === "") {
            filterContainer.style.display = "block";
        } else {
            filterContainer.style.display = "none";
        }
    });

    // Xử lý lọc sản phẩm
    document.getElementById("filterForm").addEventListener("submit", function() {
        var selectedSizes = [];
        var sizeCheckboxes = document.querySelectorAll('input[name="size"]:checked');
        sizeCheckboxes.forEach(function(checkbox) {
            selectedSizes.push(parseInt(checkbox.value));
        });

        // Thêm giá và size vào URL để gửi theo GET request
        var minPrice = document.getElementById("priceRange").value;
        var maxPrice = document.getElementById("priceRange").max;

        window.location.href = '@Url.Action("Search", "Home")?searchTerm=' + encodeURIComponent('@ViewBag.SearchTerm') + '&minPrice=' + minPrice + '&maxPrice=' + maxPrice + '&selectedSizes=' + JSON.stringify(selectedSizes);
    });
</script>
